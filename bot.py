import telebot
import random
import logging
import sys
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from pathlib import Path
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("BOT_TOKEN"))
OWNER_CHAT_ID = 7286174250  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR = Path.home() / "telegram_bot_logs"
LOG_DIR.mkdir(exist_ok=True)

class UTF8FileHandler(logging.FileHandler):
    def __init__(self, filename, encoding='utf-8', mode='a'):
        super().__init__(filename, mode, encoding)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(message)s',
    handlers=[
        UTF8FileHandler(LOG_DIR / 'bot_messages.log'),
        logging.StreamHandler()
    ]
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
message_map = {}
reply_states = {}

def log_message(direction: str, user_id: int, username: str, text: str):
    username = username or "no_username"
    logging.info(f"{direction} | UserID: {user_id} | Username: @{username} | Message: {text}")

def create_main_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        KeyboardButton("üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫"),
        KeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É")
    )
    return markup

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )
    log_message("INCOMING", message.chat.id, message.from_user.username, "/start command")

@bot.message_handler(func=lambda m: m.text == "üé≤ –ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫")
def dice_handler(message):
    sent_dice = bot.send_dice(message.chat.id, emoji="üé≤")
    dice_value = sent_dice.dice.value
    bot.send_message(
        message.chat.id,
        f"üé≤ –í—ã–ø–∞–ª–æ: {dice_value}",
        reply_markup=create_main_keyboard()
    )
    log_message("DICE_ROLL", message.from_user.id, message.from_user.username, f"dice value: {dice_value}")

@bot.message_handler(func=lambda m: m.text == "‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É")
def contact_owner(message):
    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))
    )
    reply_states[message.chat.id] = "awaiting_message"

@bot.message_handler(func=lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∞")
def cancel_handler(message):
    bot.send_message(
        message.chat.id,
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=create_main_keyboard()
    )
    if message.chat.id in reply_states:
        del reply_states[message.chat.id]

@bot.message_handler(content_types=['text'])
def handle_messages(message):
    if message.chat.id in reply_states and reply_states[message.chat.id] == "awaiting_message":
        try:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("‚úçÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message.chat.id}"))
            msg = bot.send_message(
                OWNER_CHAT_ID,
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} (@{message.from_user.username or 'no_username'}):\n{message.text}",
                reply_markup=markup
            )
            message_map[msg.message_id] = message.chat.id
            bot.send_message(
                message.chat.id,
                "‚úâÔ∏è –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
                reply_markup=create_main_keyboard()
            )
            del reply_states[message.chat.id]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        return

    if message.chat.id == OWNER_CHAT_ID and message.reply_to_message:
        original_msg_id = message.reply_to_message.message_id
        if original_msg_id in message_map:
            user_chat_id = message_map[original_msg_id]
            try:
                bot.send_message(
                    user_chat_id,
                    f"üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}"
                )
                bot.send_message(
                    OWNER_CHAT_ID,
                    "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
                )
                if OWNER_CHAT_ID in reply_states:
                    del reply_states[OWNER_CHAT_ID]
                del message_map[original_msg_id]
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return

    if message.chat.id == OWNER_CHAT_ID and OWNER_CHAT_ID in reply_states:
        user_chat_id = reply_states[OWNER_CHAT_ID]
        try:
            bot.send_message(
                user_chat_id,
                f"üì© –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message.text}"
            )
            bot.send_message(
                OWNER_CHAT_ID,
                "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
            del reply_states[OWNER_CHAT_ID]
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("reply_"))
def reply_callback(call):
    user_chat_id = int(call.data.split("_")[1])
    reply_states[call.from_user.id] = user_chat_id
    bot.send_message(
        OWNER_CHAT_ID,
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç (–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ):"
    )
    bot.answer_callback_query(call.id)

if __name__ == '__main__':
    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logging.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {LOG_DIR}")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
